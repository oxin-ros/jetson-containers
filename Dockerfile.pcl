#
# This is a Dockerfile for building PCL debian packages
# with CUDA enabled.  You can then take the output .deb packages and
# install them into other containers.
#
# See scripts/docker_build_pcl.sh to run it
#

ARG BASE_IMAGE=nvcr.io/nvidia/l4t-base:r32.4.4
FROM ${BASE_IMAGE}

#
# setup environment
#
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_HOME="/usr/local/cuda"
ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"

WORKDIR /opt

# Check https://packages.ubuntu.com/search?suite=all&arch=any&searchon=names&keywords=libvtk%20qt-dev
# for available packes for choosen Ubuntu version.
ARG VTK_MAJOR_VERSION=6
ENV VTK_MAJOR_VERSION=${VTK_MAJOR_VERSION}

# Eigen patch (https://eigen.tuxfamily.org/bz/show_bug.cgi?id=1462) to fix issue metioned
# in https://github.com/PointCloudLibrary/pcl/issues/3729 is available in Eigen 3.3.7.
# Not needed from 20.04 since it is the default version from apt
ARG EIGEN_MINIMUM_VERSION=3.3.7

# install build dependencies
COPY scripts/pcl_install_deps.sh pcl_install_deps.sh
RUN ./pcl_install_deps.sh

# Install Kitware APT repo.
# This repo contains updated CMake & Ninja packages.
# NOTE: Kitware does not work for Ubuntu 18.04 anymore.
RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add - \
    && sudo apt-get update \
    && sudo apt-get install --yes software-properties-common \
    && apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -sc) main" \
    && sudo apt-get update \
    && sudo apt-get install --yes --no-install-recommends \
        cmake \
        kitware-archive-keyring \
        ninja-build \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install updated CMake & Ninja.
RUN apt-get update \
    && apt-get install --yes --no-install-recommends \
        cmake \
        ninja-build

# Install Eigen3.
# Eigen patch (https://eigen.tuxfamily.org/bz/show_bug.cgi?id=1462) to fix issue metioned
# in https://github.com/PointCloudLibrary/pcl/issues/3729 is available in Eigen 3.3.7.
# Not needed from 20.04 since it is the default version from apt.
# Use libeigen3-dev if it meets the minimal version.
# In most cases libeigen3-dev is already installed as a dependency of libvtk6-dev & libvtk7-dev, but not in every case (libvtk9 doesn't seem to have this dependency),
# so install it from apt if the version is sufficient.
RUN if dpkg --compare-versions $(apt-cache show --no-all-versions libeigen3-dev | grep -P -o 'Version:\s*\K.*') ge ${EIGEN_MINIMUM_VERSION}; then \
        apt-get -V install -y libeigen3-dev ; \
    else \
        wget -qO- https://gitlab.com/libeigen/eigen/-/archive/${EIGEN_MINIMUM_VERSION}/eigen-${EIGEN_MINIMUM_VERSION}.tar.gz | tar xz \
        && cd eigen-${EIGEN_MINIMUM_VERSION} \
        && mkdir build \
        && cd build \
        && cmake \
            -G Ninja \
            .. \
        && ninja -j$(nproc) install \
        && cd ../.. \
        && rm -rf eigen-${EIGEN_MINIMUM_VERSION}/ ; \
    fi

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility,graphics
ENV NVIDIA_REQUIRE_CUDA "cuda>=10.2"

# architecture-specific build options
ARG CUDA_ARCH_BIN=""
ENV CUDA_ARCH_BIN=${CUDA_ARCH_BIN}

# NOTE: the OpenGL backend is planned to be depricated in PCL 1.13.
# The version of VTK for Ubuntu 18.04 aarch64 only supports OpenGL.
# VTK 7 does support OpenGL2, however it hasn't been published for Ubuntu 18.04 aarch64.
ARG RENDERING_BACKEND=OpenGL
ENV RENDERING_BACKEND=${RENDERING_BACKEND}

# Clone and configure PCL repo.
ARG PCL_VERSION="1.12.1"
ENV PCL_VERSION=${PCL_VERSION}
RUN git clone -b pcl-${PCL_VERSION} https://github.com/oxin-ros/pcl.git \
    && mkdir pcl/build \
    && cd pcl/build \
    && echo "Configuring PCL ${PCL_VERSION}, RENDERING_BACKEND=${RENDERING_BACKEND}, CUDA_ARCH_BIN=${CUDA_ARCH_BIN}" \
    && cmake \
        -D CMAKE_BUILD_TYPE=Release \
        -D VTK_RENDERING_BACKEND=${RENDERING_BACKEND} \
        -D BUILD_CUDA=ON  \
        -D CUDA_ARCH_BIN=${CUDA_ARCH_BIN} \
        -D BUILD_GPU=ON  \
        -D BUILD_apps=OFF \
        -D BUILD_benchmarks=OFF \
        -D BUILD_examples=OFF \
        -D BUILD_gpu_kinfu=OFF \
        -D BUILD_gpu_kinfu_large_scale=OFF \
        -D BUILD_simulation=OFF \
        -D BUILD_surface_on_nurbs=OFF \
        -D CMAKE_INSTALL_PREFIX=/usr/local \
        -D CPACK_PACKAGING_INSTALL_PREFIX=/usr/local \
        -D CPACK_PACKAGE_FILE_NAME="pcl-${PCL_VERSION}-$(dpkg --print-architecture)" \
        -G Ninja \
        ..

# Build the PCL library.
ARG BUILD_THREAD_COUNT
RUN cd pcl/build && ninja -j${BUILD_THREAD_COUNT}
RUN cd pcl/build && ninja install

# Package the PCL library.
RUN cd pcl/build && ninja package

# Install ccache.
RUN apt-get install --yes --no-install-recommends lsb-release

# Export the PCL library.
RUN cd pcl/build && tar -czvf pcl-${PCL_VERSION}-$(uname -i)-ubuntu-$(lsb_release -sr).tar.gz *.deb
